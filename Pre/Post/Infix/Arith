import java.util.ArrayList;

// -------------------------------------------------------------------------
/**
 *  Utility class containing validation/evaluation/conversion operations
 *  for prefix and postfix arithmetic expressions.
 *
 *  @author  
 *  @version 1/12/15 13:03:48
 */

public class Arith
{

	public static class Stack{
		ArrayList<String> stack;
		int pointer;

		public Stack() {
			stack = new ArrayList<String>();
			pointer = 0;
		}
		public String pop() {
			if(pointer>0) {
				String result = stack.get(pointer-1);
				stack.remove(pointer-1);
				pointer--;
				return result;
			}
			return "ERROR";
		}
		public void push(String newValue) {
			stack.add(pointer,newValue);
			pointer++;
		}
	}

		/*
System.out.println("A, B, +, C, D, -, *");
String[] test = {"A","B","+","C","D","-","*"}; //*+AB-CD
//System.out.print(validatePrefixOrder(test));
String[] result = convertPostfixToPrefix(test);
for (int i = 0;i<result.length;i++ ) {
System.out.print(result[i]+", ");
}
System.out.println();
System.out.println("*, +, A, B, -, C, D");

System.out.println("A B C ^ / D E * + A C * -");
String[] test = {"A","B","C","^","/","D","E","*","+","A","C","*","-"};
String[] result = convertPostfixToPrefix(test);
for (int i = 0;i<result.length;i++ ) {
System.out.print(result[i]+", ");
}
System.out.println();
System.out.println("-, +, /, A, ^, B, C, *, D, E, *, A, C, ");

		 */
		//String[] result = {"-","+","/","1","^","2","3","*","4","5","*","1","3"};
		//System.out.print(validatePrefixOrder(result));

		/* String[] test = {"*","+","1","2","-","3","4"};
String[] result = convertPrefixToPostfix(test);
System.out.print("ANSWER");
for (int i = 0;i<result.length;i++ ) {
System.out.print(result[i]+", " );
}
System.out.println();
System.out.println("1, 2, +, 3, 4, -, *, ");

		 */
		/*
//TEST PREFIX
String[] result = {"+","9","*","2","6"};
System.out.print(validatePrefixOrder(result));
System.out.println(evaluatePrefixOrder(result));
//result: 21

String[] result1 = {"-","+","8","/","6","3","2"};
System.out.print(validatePrefixOrder(result1));
System.out.println(evaluatePrefixOrder(result1));
//result:8

String[] result2 = {"-","+","7","*","4","5","+","2","0"};
System.out.print(validatePrefixOrder(result2));
System.out.println(evaluatePrefixOrder(result2));
//result:25
		 */
		/*
		 * TEST PREFIX TO POSTIX
String[] test = {"*","+","1","2","-","3","4"};
System.out.println("*, +, 1, 2, -, 3, 4 ");
String[] result = convertPrefixToPostfix(test);
for (int i = 0;i<result.length;i++ ) {
System.out.print(result[i]+", " );
}
System.out.println();
System.out.println("1, 2, +, 3, 4, -, *");

String[] test1 = {"*","1","+","2","/","3","4"};
System.out.println("*, 1, +, 2, /, 3, 4 ");
String[] result1 = convertPrefixToPostfix(test1);
for (int i = 0;i<result1.length;i++ ) {
System.out.print(result1[i]+", " );
}
System.out.println();
System.out.print("1, 2, 3, 4, /, +, *");
		 */
		/*
		 * TEST PREFIX TO INFIX
String[] test = {"*","+","A","B","-","C","D"};
String[] result = convertPrefixToInfix(test);
for (int i = 0;i<result.length;i++ ) {
System.out.print(result[i]+" " );
}
System.out.println();
System.out.print("((A+B)*(C-D))");

System.out.println();
String[] test1 = {"*","-","A","/","B","C","-","/","A","K","L"};
String[] result1 = convertPrefixToInfix(test1);
for (int i = 0;i<result1.length;i++ ) {
System.out.print(result1[i]+" " );
}
System.out.println();
System.out.print("((A-(B/C))*((A/K)-L))");

		 */
		/*
		String[] test = {"a","b","c","+","+"};
		String[] result = convertPostfixToInfix(test);
		for (int i = 0;i<result.length;i++ ) {
			System.out.print(result[i]+" " );
		}
		System.out.println();
		System.out.print("(a + (b + c))");

		System.out.println();
		String[] test1 = {"a","b","c","-","+","d","e","-","f","g","-","h","+","/","*"};
		String[] result1 = convertPostfixToInfix(test1);
		for (int i = 0;i<result1.length;i++ ) {
			System.out.print(result1[i] );
		}
		System.out.println();
		System.out.print("(a+b-c)*(d-e)/(f-g+h)");

*/


	//~ Validation methods ..........................................................


	/**
	 * Validation method for prefix notation.
	 *
	 * @param prefixLiterals : an array containing the string literals hopefully in prefix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return true if the parameter is indeed in prefix notation, and false otherwise.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N
	 *  the for loop iterates N times
	 *  each loop is constant - Theta(1)
	 *  therefore it is Theta*N
	 */

	public static boolean validatePrefixOrder(String prefixLiterals[])
	{
		if (prefixLiterals != null) {
			int counter = 1;
			for(int i = 0; i<prefixLiterals.length; i++) {
				if (isOperator(prefixLiterals[i])) {
					counter++;
				}
				else if((prefixLiterals[i].charAt(0)<='9'&&prefixLiterals[i].charAt(0)>='0')) {
					counter--;
				}
				if ((counter <= 0)&&(i!=prefixLiterals.length-1)){
					return false;
				}
			}
			if (counter == 0) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Validation method for postfix notation.
	 *
	 * @param postfixLiterals : an array containing the string literals hopefully in postfix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return true if the parameter is indeed in postfix notation, and false otherwise.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N
	 *  the for loop iterates N times
	 *  each loop is constant - Theta(1)
	 *  therefore it is Theta*N
	 */
	public static boolean validatePostfixOrder(String postfixLiterals[])
	{
		if (postfixLiterals != null) {
			int counter = 1;
			for(int i = postfixLiterals.length-1; i>=0; i--) {
				if (isOperator(postfixLiterals[i])) {
					counter++;
				}
				else if((postfixLiterals[i].charAt(0)<='9'&&postfixLiterals[i].charAt(0)>='0')) {
					counter--;
				}
				if ((counter <= 0)&&(i!=0)){
					return false;
				}
			}
			if (counter == 0) {
				return true;
			}
		}
		return false;
	}


	//~ Evaluation  methods ..........................................................


	/**
	 * Evaluation method for prefix notation.
	 *
	 * @param prefixLiterals : an array containing the string literals in prefix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the integer result of evaluating the expression
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N
	 *  the for loop iterates N times
	 *  each loop is constant - Theta(1)
	 *   the push function is Theta(1) each time
	 *  therefore it is Theta*N
	 */
	public static int evaluatePrefixOrder(String prefixLiterals[])
	{
		Stack theStack = new Stack();
		for (int i = prefixLiterals.length-1; i>=0;i--) {
			int result = 0;
			if (isOperator(prefixLiterals[i])) {
				String str1 = theStack.pop();
				String str2 = theStack.pop();
				int num1 = Integer.parseInt(str1);
				int num2 = Integer.parseInt(str2);
				switch(prefixLiterals[i]) {
				case "+":
					result = num1 + num2;
					break;
				case "-":
					result = num1 - num2;
					break;
				case "*":
					result = num1 * num2;
					break;
				case "/":
					result = num1 / num2;
					break;
				case "^":
					result = (int) Math.pow(num1, num2);
					break;
				}
				theStack.push(String.valueOf(result));
			}
			else if ((prefixLiterals[i].charAt(0)<='9'&&prefixLiterals[i].charAt(0)>='0')) {
				theStack.push(prefixLiterals[i]);
			}
		}
		return Integer.parseInt(theStack.pop());
	}


	/**
	 * Evaluation method for postfix notation.
	 *
	 * @param postfixLiterals : an array containing the string literals in postfix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the integer result of evaluating the expression
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N
	 *  the for loop iterates N times
	 *  each loop is constant - Theta(1)
	 *  therefore it is Theta*N
	 */
	public static int evaluatePostfixOrder(String postfixLiterals[])
	{
		Stack theStack = new Stack();
		for (int i = 0; i<postfixLiterals.length;i++) {
			int result = 0;
			if (isOperator(postfixLiterals[i])) {
				String str2 = theStack.pop();
				String str1 = theStack.pop();
				int num2 = Integer.parseInt(str2);
				int num1 = Integer.parseInt(str1);
				switch(postfixLiterals[i]) {
				case "+":
					result = num1 + num2;
					break;
				case "-":
					result = num1 - num2;
					break;
				case "*":
					result = num1 * num2;
					break;
				case "/":
					result = num1 / num2;
					break;
				case "^":
					result = (int) Math.pow(num1, num2);
					break;
				}
				theStack.push(String.valueOf(result));
			}
			else if ((postfixLiterals[i].charAt(0)<='9'&&postfixLiterals[i].charAt(0)>='0')) {
				theStack.push(postfixLiterals[i]);
			}
		}
		return Integer.parseInt(theStack.pop());
	}


	//~ Conversion  methods ..........................................................


	/**
	 * Converts prefix to postfix.
	 *
	 * @param prefixLiterals : an array containing the string literals in prefix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the expression in postfix order.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N^2
	 *  the first for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  the second for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  therefore it is Theta*N
	 */
	public static String[] convertPrefixToPostfix(String prefixLiterals[])
	{
		
		Stack theStack = new Stack();
		for (int i=prefixLiterals.length-1;i>=0;i--) {
			if (isOperator(prefixLiterals[i])) {
				String op1 = theStack.pop();
				String op2 = theStack.pop();
				op1 = op1+op2+prefixLiterals[i];
				theStack.push(op1);
			}
			else {
				theStack.push(prefixLiterals[i]);
			}
		}
		String result = theStack.pop();
		String[] finalResult = new String[result.length()];
		for (int j=0; j<result.length(); j++) {
			char charOperand=result.charAt(j);
			String strOperand=Character.toString(charOperand);
			finalResult[j] = strOperand;
		}
		return finalResult;
	}


	/**
	 * Converts postfix to prefix.
	 *
	 * @param prefixLiterals : an array containing the string literals in postfix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the expression in prefix order.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N^2
	 *  the first for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  the second for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  therefore it is Theta*N
	 */
	public static String[] convertPostfixToPrefix(String postfixLiterals[])
	{
		//done

		Stack theStack = new Stack();
		for (int i=0;i<postfixLiterals.length;i++) {
			if (isOperator(postfixLiterals[i])) {
				String op1 = theStack.pop();
				String op2 = theStack.pop();
				op1 = postfixLiterals[i]+op2+op1;
				theStack.push(op1);
			}
			else {
				theStack.push(postfixLiterals[i]);
			}
		}
		String result = theStack.pop();
		String[] finalResult = new String[result.length()];
		for (int j=0; j<result.length(); j++) {
			char charOperand=result.charAt(j);
			String strOperand=Character.toString(charOperand);
			finalResult[j] = strOperand;
		}
		return finalResult;
	}
	
	/*
	 *  the worst asymptotic running time is Theta(1)
	 *  the expressions are constant and there are no loops
	 */
	static boolean isOperator(String x)
	{
		if((x=="-")||(x=="+")||(x=="/")||(x=="*")||(x=="^")) {
			return true;
		}
		else if (x == null) {
			return false;
		}
		return false;
	}
	/**
	 * Converts prefix to infix.
	 *
	 * @param infixLiterals : an array containing the string literals in prefix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the expression in infix order.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N*M
	 *  the first for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  the second for loop iterates M times - M being the length of the new infix expression, larger than N
	 *  each iteration is constant - Theta(1)
	 *  therefore it is Theta*M
	 */
	public static String[] convertPrefixToInfix(String prefixLiterals[])
	{
		Stack theStack = new Stack();
		for (int i=prefixLiterals.length-1; i>=0; i--) {
			if (isOperator(prefixLiterals[i])) {
				String op1 = theStack.pop();
				String op2 = theStack.pop();
				op1 = "("+op1 + prefixLiterals[i] + op2+")";
				theStack.push(op1);
			}
			else {
				theStack.push(prefixLiterals[i]);
			}
		}
		String result = theStack.pop();
		String[] finalResult = new String[result.length()];
		for (int j=0; j<result.length(); j++) {
			char charOperand=result.charAt(j);
			String strOperand=Character.toString(charOperand);
			finalResult[j] = strOperand;
		}
		return finalResult;

	}

	/**
	 * Converts postfix to infix.
	 *
	 * @param infixLiterals : an array containing the string literals in postfix order.
	 * The method assumes that each of these literals can be one of:
	 * - "+", "-", "*", or "/"
	 * - or a valid string representation of an integer.
	 *
	 * @return the expression in infix order.
	 **/
	/*
	 *  the worst asymptotic running time is Theta*N*M
	 *  the first for loop iterates N times
	 *  each iteration is constant - Theta(1)
	 *  the second for loop iterates M times - M being the length of the new infix expression, larger than N
	 *  each iteration is constant - Theta(1)
	 *  therefore it is Theta*M
	 */
	public static String[] convertPostfixToInfix(String postfixLiterals[])
	{
		Stack theStack = new Stack();
		for (int i=0; i<postfixLiterals.length; i++) {
			if (isOperator(postfixLiterals[i])) {
				String op1 = theStack.pop();
				String op2 = theStack.pop();
				op1 = "("+op2 + postfixLiterals[i] + op1+")";
				theStack.push(op1);
			}
			else {
				theStack.push(postfixLiterals[i]);
			}
		}
		String result = theStack.pop();
		String[] finalResult = new String[result.length()];
		for (int j=0; j<result.length(); j++) {
			char charOperand=result.charAt(j);
			String strOperand=Character.toString(charOperand);
			finalResult[j] = strOperand;
		}
		return finalResult;
	}
}