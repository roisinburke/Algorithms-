import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertNull;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
//-------------------------------------------------------------------------
/**
 *  Test class for Doubly Linked List
 *
 *  @author 
 *  @version 13/10/16 18:15
 */
@RunWith(JUnit4.class)
public class DoublyLinkedListTest
{
    //~ Constructor ........................................................
    @Test
    public void testConstructor()
    {
      new DoublyLinkedList<Integer>();
    }
    //~ Public Methods ........................................................
    // ----------------------------------------------------------
    /**
     * Check if the insertBefore works
     */
    @Test
    public void testInsertFirst()
    {
    	DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertFirst(1);
        assertEquals( "Checking insertFirst with an empty list by inserting 1", "1", testDLL.toString() );
        testDLL.insertFirst(2);
        testDLL.insertFirst(3);
        testDLL.insertFirst(4);
        assertEquals( "Checking insertFirst with a loaded list by inserting 2,3,4", "4,3,2,1", testDLL.toString() );

    }
    @Test
    public void testInsertLast()
    {
    	DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertFirst(9);
        assertEquals( "Checking insertLast with an empty list by inserting 9", "9", testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertFirst(8);
        testDLL.insertFirst(7);
        testDLL.insertFirst(6);
        assertEquals( "Checking insertFirst with a loaded list by inserting 9,8,7,6", "6,7,8", testDLL.toString() );
    }
    @Test
    public void testInsertBefore()
    {
        // test non-empty list
        DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
       
        testDLL.insertBefore(0,4);
        assertEquals( "Checking insertBefore to a list containing 3 elements at position 0", "4,1,2,3", testDLL.toString() );
        testDLL.insertBefore(1,5);
        assertEquals( "Checking insertBefore to a list containing 4 elements at position 1", "4,5,1,2,3", testDLL.toString() );
        testDLL.insertBefore(2,6);      
        assertEquals( "Checking insertBefore to a list containing 5 elements at position 2", "4,5,6,1,2,3", testDLL.toString() );
        testDLL.insertBefore(-1,7);       
        assertEquals( "Checking insertBefore to a list containing 6 elements at position -1 - expected the element at the head of the list", "7,4,5,6,1,2,3", testDLL.toString() );
        testDLL.insertBefore(7,8);       
        assertEquals( "Checking insertBefore to a list containing 7 elemenets at position 8 - expected the element at the tail of the list", "7,4,5,6,1,2,3,8", testDLL.toString() );
        testDLL.insertBefore(700,9);       
        assertEquals( "Checking insertBefore to a list containing 8 elements at position 700 - expected the element at the tail of the list", "7,4,5,6,1,2,3,8,9", testDLL.toString() );
        // test empty list
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);       
        assertEquals( "Checking insertBefore to an empty list at position 0 - expected the element at the head of the list", "1", testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(10,1);       
        assertEquals( "Checking insertBefore to an empty list at position 10 - expected the element at the head of the list", "1", testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(-10,1);       
        assertEquals( "Checking insertBefore to an empty list at position -10 - expected the element at the head of the list", "1", testDLL.toString() );
     }
    
    
    @Test
    public void testIsEmpty()
    {
     DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
     assertTrue("Checking isEmpty with an empty list", testDLL.isEmpty());
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
     assertFalse("Checking isEmpty with an empty list", testDLL.isEmpty());
    }
    @Test
    public void testGet()
    {
        DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        assertEquals("Check get with empty list at position 0 - expected element is null ",null , testDLL.get(0) );
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.get(1);
        assertEquals("Check get with loaded list at position 1 - expected result is 2 ", "2", testDLL.get(1).toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        assertEquals("Check get with loaded list at position 1 - expected result is 2 ", 2, (int) testDLL.get(1) );
        assertEquals("Check get with loaded list at position 4, out of bounds - expected result is null ", null,  testDLL.get(4) );
        assertEquals("Check get for loaded list at position 0 - expected result is 1 ", 1, (int) testDLL.get(0) );
    }
   
   @Test
    public void testDeleteAt()
    {
        DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        assertFalse("Check deleteAt with empty list at position 0 - expected element is false ", testDLL.deleteAt(0) );
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        assertTrue("Check deleteAt with loaded list at position 0 - expected element is true ", testDLL.deleteAt(0) );
        assertTrue("Check deleteAt with loaded list at position 1 - expected element is true ", testDLL.deleteAt(1) );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        assertFalse("Check deleteAt with loaded list at position -5 which is out of bounds - expected element is false ", testDLL.deleteAt(-5) );
     //   assertFalse("Check get with loaded list at position 1 - expected element is true ", testDLL.deleteAt(5) );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        assertTrue("Check deleteAt with single element loaded list at position 0 - expected element is true ", testDLL.deleteAt(0) );
        
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        assertFalse("Check deleteAt with single element list at position 1 which is out of bounds - expected element is false ", testDLL.deleteAt(1) );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        assertTrue("Check get with loaded list at position 0 - expected element is true ", testDLL.deleteAt(1) );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        assertTrue("Check get with loaded list at position 0 - expected element is true ", testDLL.deleteAt(2) );

    }   
    @Test
    public void testReverse()
    {
        DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        testDLL.reverse();
        assertEquals("Check reverse with empty list - expected result is an empty string ", "" ,  testDLL.toString() );
        testDLL.insertBefore(0,3);
        testDLL.reverse();
        assertEquals("Check reverse with empty list - expected result is an empty string ", "3" ,  testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,3);
        testDLL.insertBefore(1,4);
        testDLL.insertBefore(2,5);
        testDLL.reverse();
        assertEquals("Check reverse with loaded list - expected result is  5,4,3 " , "5,4,3" ,  testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,3);
        testDLL.insertBefore(3,4);
        testDLL.insertBefore(4,5);
        testDLL.insertBefore(5,6);
        testDLL.reverse();
        assertEquals("Check reverse with loaded list - expected result is  6,5,4,3,2,1 " , "6,5,4,3,2,1" ,  testDLL.toString() );

    }
   
    @Test
    public void makeUnique()
    {
        DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
        testDLL.makeUnique();
        assertEquals("Check makeUnique with empty list - expected result is an empty string ", "" ,  testDLL.toString() );
        testDLL.insertBefore(0,1);                
        testDLL.makeUnique();
        assertEquals("Check makeUnique with loaded list - expected result is the same string ", "1" ,  testDLL.toString() );
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);                
        testDLL.insertBefore(1,1);
        testDLL.makeUnique();
        assertEquals("Check makeUnique with loaded list - expected result is the same string ", "1" ,  testDLL.toString() );

        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);                
        testDLL.insertBefore(1,2);                                                                                                                                                           
        testDLL.insertBefore(2,2);
        testDLL.makeUnique();
        assertEquals("Check makeUnique with loaded list - expected result is an '1,2'  ", "1,2" ,  testDLL.toString() );
        
        testDLL = new DoublyLinkedList<Integer>();
        testDLL.insertBefore(0,1);
        testDLL.insertBefore(1,2);
        testDLL.insertBefore(2,2);
        testDLL.insertBefore(3,3);
        testDLL.insertBefore(4,2);
        testDLL.insertBefore(5,4);
        testDLL.makeUnique();
        assertEquals("Check makeUnique with loaded list - expected result is an '1,2'  ", "1,2,3,4" ,  testDLL.toString() );
       
    }
    @Test
    public void testPush()
    {
     DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
     testDLL.push(5);
     assertEquals("Checking push function for empty list", "5", testDLL.toString());
     testDLL.push(6);
     assertEquals("Checking push function for loaded list", "6,5", testDLL.toString());
     testDLL.push(7);
     assertEquals("Checking push function for loaded list", "7,6,5", testDLL.toString());
     testDLL.push(1);
     testDLL.push(2);
     testDLL.push(3);
     assertEquals("Checking push function for loaded list", "3,2,1,7,6,5", testDLL.toString());
    }
   
    @Test
    public void testPop()
    {
     DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
     assertEquals("Checking pop function for empty list", null, testDLL.pop());
     testDLL.push(9);
     assertEquals("Checking pop function for 1 element list", "9", testDLL.pop().toString());
     testDLL.push(1);
     testDLL.push(2);
     assertEquals("Checking pop function for loaded list", "2", testDLL.pop().toString());
    }
   
    @Test
    public void testEnqueue()
    {
     DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
    
     testDLL.enqueue(1);
     assertEquals("Checking enqueue function for empty list", "1", testDLL.toString());
     testDLL.enqueue(2);
     testDLL.enqueue(3);
     testDLL.enqueue(4);
     assertEquals("Checking enqueue function for loaded list", "1,2,3,4", testDLL.toString());
     testDLL.dequeue();
     testDLL.enqueue(5);
     assertEquals("Checking enqueue function for loaded list", "2,3,4,5", testDLL.toString());
    }
   
    @Test
    public void testDequeue()
    {
     DoublyLinkedList<Integer> testDLL = new DoublyLinkedList<Integer>();
     assertEquals("Checking dequeue function for empty list", null, testDLL.dequeue());
     testDLL.enqueue(1);
     assertEquals("Checking dequeue function for 1 element list", "1", testDLL.dequeue().toString());
     testDLL.enqueue(2);
     testDLL.enqueue(3);
     assertEquals("Checking dequeue function for non-empty list", "2", testDLL.dequeue().toString());
     testDLL.enqueue(4);
     testDLL.enqueue(5);
     assertEquals("Checking dequeue function for loaded list", "3", testDLL.dequeue().toString());
     assertEquals("Checking dequeue function for loaded list", "4", testDLL.dequeue().toString());
     assertEquals("Checking dequeue function for loaded list", "5", testDLL.dequeue().toString());
     assertEquals("Checking dequeue function for empty list", null, testDLL.dequeue());

    }
    
}
